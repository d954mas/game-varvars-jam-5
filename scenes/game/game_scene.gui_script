local COMMON = require "libs.common"
local GUI = require "libs_project.gui.gui"
local WORLD = require "world.world"
local POINTER = require "libs.pointer_lock"
local VirtualPad = require "libs_project.gui.virtual_pad"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

---@class GameSceneGuiScript:GuiScriptBase
local Script = COMMON.class("GameSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.GAME_GUI })
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler):subscribe(function()
		self:on_resize()
	end))
	self:on_resize()

end

function Script:bind_vh()
	self.vh = {
		crosshair = gui.get_node("crosshair"),
		checkbox_editor = gui.get_node("checkbox_editor"),
		top = gui.get_node("top"),
		top_right = gui.get_node("top_right"),
		left = gui.get_node("left"),
		bottom = gui.get_node("bottom"),
		lbl_level = gui.get_node("lbl_level"),
	}
	self.views = {
		checkbox_mouse_lock = GUI.CheckboxWithLabel("checkbox_mouse_lock"),
		checkbox_first_person = GUI.CheckboxWithLabel("checkbox_first_person"),
		checkbox_ghost_mode = GUI.CheckboxWithLabel("checkbox_ghost_mode"),
		virtual_pad = VirtualPad("virtual_pad"),
		btn_ghost_up = GUI.ButtonScale("btn_ghost_up"),
		btn_ghost_down = GUI.ButtonScale("btn_ghost_down"),
		btn_settings = GUI.ButtonScale("btn_settings"),
		btn_book = GUI.ButtonScale("btn_book"),
		---@type ProgressBar
		cats_progress = nil
	}

	local progress_vh = {
		root = gui.get_node("level_bar/root"),
		bg = gui.get_node("level_bar/bg"),
		progress = gui.get_node("level_bar/progress"),
		lbl = gui.get_node("level_bar/lbl"),
	}
	self.views.cats_progress = GUI.ProgressBar(progress_vh)
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.GAME)
	gui.set_enabled(self.vh.crosshair, WORLD.game.level_creator.player.camera.first_persons)
	gui.set_enabled(self.vh.checkbox_editor, COMMON.CONSTANTS.TARGET_IS_EDITOR)

	self.views.btn_settings.input_on_pressed = true
	self.views.btn_settings:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		WORLD.sm:show(WORLD.sm.MODALS.SETTINGS)
	end)

	self.views.btn_book.input_on_pressed = true
	self.views.btn_book:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		WORLD.sm:show(WORLD.sm.MODALS.BOOK)
	end)

	--	self.views.virtual_pad.borders[3] = 440
	--DISABLE FOR EDITOR. SO i can build location
	self.views.virtual_pad:set_enabled(not COMMON.CONSTANTS.TARGET_IS_EDITOR)

	local checkbox_mouse_lock = self.views.checkbox_mouse_lock
	checkbox_mouse_lock:set_checked(WORLD.game.state.mouse_lock)
	checkbox_mouse_lock:set_input_listener(function()
		WORLD.game.state.mouse_lock = checkbox_mouse_lock.checked
		if (WORLD.game.state.mouse_lock) then
			POINTER.lock_cursor() end
		if (not WORLD.game.state.mouse_lock) then
			POINTER.unlock_cursor()
		end
	end)

	local checkbox_first_person = self.views.checkbox_first_person
	checkbox_first_person:set_checked(WORLD.game.level_creator.player.camera.first_person)
	checkbox_first_person:set_input_listener(function()
		WORLD.game:camera_set_first_person(checkbox_first_person.checked)
	end)

	local checkbox_ghost_mode = self.views.checkbox_ghost_mode
	checkbox_ghost_mode:set_checked(WORLD.game.level_creator.player.ghost_mode)
	checkbox_ghost_mode:set_input_listener(function()
		WORLD.game.level_creator.player.ghost_mode = checkbox_ghost_mode.checked
		self:update_ghost_mode()
	end)

	self:update_ghost_mode()
end

function Script:level_loaded()
	self.views.cats_progress:set_value_max(WORLD.game.level_creator.level_config.cats)
	self.views.cats_progress:set_value(0, true)
end

function Script:update_ghost_mode()
	local enabled = WORLD.game.level_creator.player.ghost_mode-- and COMMON.is_mobile()
	self.views.btn_ghost_up:set_enabled(enabled)
	self.views.btn_ghost_down:set_enabled(enabled)
end

function Script:update(dt)
	BaseGuiScript.update(self, dt)
	self.views.virtual_pad:update(dt)
	self.views.cats_progress:update(dt)
	gui.set_text(self.vh.lbl_level, "LEVEL:" .. WORLD.game.state.level)
end

function Script:on_input(action_id, action)
	if (self.views.checkbox_mouse_lock:on_input(action_id, action)) then return true end
	if (self.views.checkbox_first_person:on_input(action_id, action)) then return true end
	if (self.views.checkbox_ghost_mode:on_input(action_id, action)) then return true end
	if (self.views.virtual_pad:on_input(action_id, action)) then return true end
	if (self.views.btn_ghost_down:on_input(action_id, action)) then return true end
	if (self.views.btn_ghost_up:on_input(action_id, action)) then return true end
	if (self.views.btn_settings:on_input(action_id, action)) then return true end
	if (self.views.btn_book:on_input(action_id, action)) then return true end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.top_right, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.top_right, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.left, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.left, COMMON.RENDER.gui_scale.scale)
	gui.set_adjust_mode(self.vh.bottom, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.bottom, COMMON.RENDER.gui_scale.scale)
	gui.set_scale(self.vh.top, COMMON.RENDER.gui_scale.scale)
end

function Script:final()
	BaseGuiScript.final(self)
end

COMMON.N28S.register_scripts({ Script() })