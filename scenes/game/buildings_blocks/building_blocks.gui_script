--#IF RELEASE
function init()
	gui.set_enabled(gui.get_node("current_block"),false)
	gui.set_enabled(gui.get_node("menu"),false)
	gui.set_enabled(gui.get_node("fader"),false)
end
--#ENDIF

--#IF DEBUG
local COMMON = require "libs.common"
local WORLD = require "world.world"
local POINTER = require "libs.pointer_lock"
local ENUMS = require "world.enums.enums"
local DEFS = require "world.balance.def.defs"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

---@class BuildingBlocksGuiScript:GuiScriptBase
local Script = COMMON.class("BuildingBlocksGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.BUILDING_BLOCKS })
end

function Script:bind_vh()
	self.vh = {
		menu = gui.get_node("menu"),
		fader = gui.get_node("fader"),
		current_block_icon = gui.get_node("current_block/icon"),
		current_block = gui.get_node("current_block")
	}

	self.views = {
		cells = {}
	}
	for i = 1, 28 do
		local cell = {
			root = gui.get_node("cell_" .. i .. "/root"),
			icon = gui.get_node("cell_" .. i .. "/icon"),
			voxel = -1
		}
		self.views.cells[i] = cell
		gui.set_enabled(cell.root, false)
	end
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.BUILDING_BLOCKS)
	local is_mobile = COMMON.is_mobile() or not COMMON.CONSTANTS.TARGET_IS_EDITOR
	gui.set_enabled(self.vh.current_block, not is_mobile)
	self:set_menu_visible(false)
	local cellIdx = 0
	for i = 0, #DEFS.VOXELS.VOXELS do
		cellIdx = cellIdx + 1
		local view = self.views.cells[cellIdx]
		view.voxel = i
		gui.play_flipbook(view.icon, self:get_voxel_image(i))
		gui.set_enabled(view.root, true)
	end
	self:set_current_voxel(WORLD.game.state.building_blocks.voxel)

end

function Script:set_menu_visible(visible)
	self.show_menu = visible
	gui.set_enabled(self.vh.menu, visible)
	gui.set_enabled(self.vh.fader, visible)
end

function Script:set_current_voxel(voxel)
	gui.play_flipbook(self.vh.current_block_icon, self:get_voxel_image(voxel))
	WORLD.game.state.building_blocks.voxel = voxel
end

function Script:get_voxel_image(voxel)
	if (voxel) == 0 then return "white" end
	local def = DEFS.VOXELS.VOXELS[voxel]
	if (def) then
		return def.img
	end
	return "block_unknown"
end

function Script:update(dt)
	if (self.show_menu) then POINTER.unlock_cursor() end
end

function Script:on_input(action_id, action)
	if COMMON.is_mobile() or not COMMON.CONSTANTS.TARGET_IS_EDITOR then return false end
	if ((action_id == COMMON.HASHES.INPUT.B or action_id == COMMON.HASHES.INPUT.ESCAPE) and action.pressed) then
		if (self.show_menu or action_id == COMMON.HASHES.INPUT.B) then
			self:set_menu_visible(not self.show_menu)
		end
	end
	if (action.pressed and action_id == COMMON.HASHES.INPUT.TOUCH) then
		for _, view in ipairs(self.views.cells) do
			if (gui.is_enabled(view.root, true) and gui.pick_node(view.root, action.x, action.y)) then
				self:set_current_voxel(view.voxel)
			end
		end
	end
end

function Script:on_resize()

end

COMMON.N28S.register_scripts({ Script() })


--#ENDIF