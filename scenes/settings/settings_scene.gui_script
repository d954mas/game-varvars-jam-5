local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local TWEEN = require "libs.tween"
local WORLD = require "world.world"
local GUI = require "libs_project.gui.gui"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"
local SoundMusicGui = require "libs.scripts.sound_music_gui_script"

---@class SettingsSceneGuiScript:GuiScriptBase
local Script = COMMON.class("SettingsSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.SETTINGS_GUI })
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler):subscribe(function()
		self:on_resize()
	end))
	self:on_resize()
end

function Script:bind_vh()
	self.vh = {
		root = gui.get_node("root"),
		root_adjust = gui.get_node("root/adjust"),
		fader = gui.get_node("fader"),
		click_zone = gui.get_node("click_zone"),
		title_lbl = gui.get_node("modal/title/lbl"),
		sound_lbl = gui.get_node("checkbox_sound/label"),
		music_lbl = gui.get_node("checkbox_music/label"),
		shadows_lbl = gui.get_node("checkbox_draw_shadows/label"),
		login_title = gui.get_node("btn_login/text"),
		login_bg = gui.get_node("btn_login/bg")
	}
	self.views = {
		btn_close = GUI.ButtonScale("btn_close"),
		checkbox_draw_shadows = GUI.Tumbler("checkbox_draw_shadows"),
		btn_login = GUI.ButtonScale("btn_login"),
	}
end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.SETTINGS)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false

	self.fader_color = gui.get_color(self.vh.fader)
	gui.set_color(self.vh.fader, vmath.vector4(self.fader_color.x, self.fader_color.y, self.fader_color.z, 0))

	self.views.btn_close:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		self:close()
	end)

	local chb_draw_shadows = self.views.checkbox_draw_shadows
	chb_draw_shadows:set_checked(WORLD.storage.options:draw_shadows_get())
	chb_draw_shadows:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.slider)
		WORLD.storage.options:draw_shadows_set(chb_draw_shadows.checked)
	end)
	chb_draw_shadows:on_input()

	self.views.btn_login:set_input_listener(function()
		if (WORLD.sdk.is_yandex) then
			WORLD.sdk.yagames_sdk:login_player()
		end
	end)

	gui.set_text(self.vh.shadows_lbl, COMMON.LOCALIZATION.setting_shadows())
	gui.set_text(self.vh.sound_lbl, COMMON.LOCALIZATION.setting_sound())
	gui.set_text(self.vh.music_lbl, COMMON.LOCALIZATION.setting_music())
	GUI.autosize_text(self.vh.title_lbl, 1.5, COMMON.LOCALIZATION.setting_title())

	if WORLD.sdk.is_yandex then
		gui.set_position(self.views.checkbox_draw_shadows.vh.root, vmath.vector3(75, 70 + 10, 0))
		gui.set_position(gui.get_node("checkbox_music/root"), vmath.vector3(75, 0 + 15, 0))
		gui.set_position(gui.get_node("checkbox_sound/root"), vmath.vector3(75, -70 + 20, 0))
		self.views.btn_login:set_enabled(true)
	else
		self.views.btn_login:set_enabled(false)
	end
end

function Script:update_login_title()
	print("update login title")
	self.views.btn_login:set_ignore_input(false)
	gui.set_enabled(self.vh.login_bg, true)
	if (WORLD.sdk.is_yandex) then
		local YA = WORLD.sdk.yagames_sdk.ya
		local text = COMMON.LOCALIZATION.login_name()
		if (YA.player_ready) then
			if YA.player_get_mode() == "lite" then
				text = COMMON.LOCALIZATION.login_auth()
			else
				local name = YA.player_get_name()
				if (name == "") then
					text = COMMON.LOCALIZATION.login_name()
					self.views.btn_login:set_ignore_input(true)
					gui.set_enabled(self.vh.login_bg, false)
				else
					text = name
					self.views.btn_login:set_ignore_input(true)
					gui.set_enabled(self.vh.login_bg, false)
				end
			end
		else
			text = COMMON.LOCALIZATION.login_auth()
		end
		gui.set_text(self.vh.login_title, text)
	else
		gui.set_text(self.vh.login_title, COMMON.LOCALIZATION.login_auth())
	end
end

function Script:close()
	WORLD.sdk:ads_commercial(function()
		WORLD.sm:back()
	end)
end

function Script:on_storage_changed()
	BaseGuiScript.on_storage_changed()
	self:update_login_title()
end

function Script:animate_hide()
	while (not self.animation_action:is_empty()) do self.animation_action:update(1) end
	local start_color = vmath.vector4(self.fader_color)
	start_color.w = 0
	local show_parallel = ACTIONS.Parallel()

	show_parallel:add_action(ACTIONS.TweenGui {
		object = self.vh.fader, property = "color", v4 = true,
		to = start_color, time = 0.25, easing = TWEEN.easing.outCubic, delay = 0.1
	})

	show_parallel:add_action(ACTIONS.TweenGui {
		object = self.vh.root, property = "color", v4 = true,
		to = vmath.vector4(1, 1, 1, 0), time = 0.3, easing = TWEEN.easing.outQuad, delay = 0
	})
	show_parallel:add_action(ACTIONS.TweenGui {
		object = self.vh.root, property = "scale", v3 = true,
		from = vmath.vector3(1), to = vmath.vector3(0.01), time = 0.2, easing = TWEEN.easing.outQuad, delay = 0
	})

	self.animation_action:add_action(show_parallel)
end

function Script:animate_hide()
	GUI.window_hide_animation(self)
end

function Script:animate_show()
	GUI.window_show_animation(self)
end

function Script:update(dt)
	BaseGuiScript.update(self, dt)
	self.animation_action:update(dt)
end

function Script:on_input(action_id, action)
	if (action_id == COMMON.HASHES.INPUT.ESCAPE and action.pressed) then
		self:close()
		return true
	end
	if (self.views.btn_close:on_input(action_id, action)) then return true end
	if (self.views.checkbox_draw_shadows:on_input(action_id, action)) then return true end
	if (self.views.btn_login:on_input(action_id, action)) then return true end
	if (action_id == COMMON.HASHES.INPUT.TOUCH and action.pressed and not gui.pick_node(self.vh.click_zone, action.x, action.y)) then
		self:close()
		return
	end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.root_adjust, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.root_adjust, COMMON.RENDER.gui_scale.scale2)
end

COMMON.N28S.register_scripts({ SoundMusicGui(), Script() })