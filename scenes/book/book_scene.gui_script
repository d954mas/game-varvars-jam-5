local COMMON = require "libs.common"
local ACTIONS = require "libs.actions.actions"
local TWEEN = require "libs.tween"
local WORLD = require "world.world"
local GUI = require "libs_project.gui.gui"
local DEFS = require "world.balance.def.defs"
local CatsList = require "libs_project.gui.cats_list"
local BaseGuiScript = require "libs_project.scripts.base_gui_script"

if not COMMON.GLOBAL.BOOK_SCROLL then COMMON.GLOBAL.BOOK_SCROLL = vmath.vector3() end

---@class BookSceneGuiScript:GuiScriptBase
local Script = COMMON.class("UpgradesSceneGuiScript", BaseGuiScript)

function Script:init()
	BaseGuiScript.init(self, { context_name = COMMON.CONTEXT.NAMES.BOOK_GUI })
	self.subscription:add(COMMON.EVENT_BUS:subscribe(COMMON.EVENTS.WINDOW_RESIZED):go_distinct(self.scheduler):subscribe(function()
		self:on_resize()
	end))
	self:on_resize()

end

function Script:bind_vh()
	self.list_data = {}
	for i = 1, #DEFS.CATS.LIST, 2 do
		local item = { cat_1 = {def = DEFS.CATS.LIST[i]}, cat_2 = {def = DEFS.CATS.LIST[i + 1]} }
		table.insert(self.list_data, item)
	end

	self.vh = {
		root = gui.get_node("root"),
		root_adjust = gui.get_node("root/adjust"),
		fader = gui.get_node("fader"),
		title_lbl = gui.get_node("modal/title/lbl"),
		click_zone = gui.get_node("click_zone"),
	}
	self.views = {
		btn_close = GUI.ButtonScale("btn_close"),
		list = CatsList(self.list_data, "cats_list")
	}

end

function Script:init_gui()
	BaseGuiScript.init_gui(self)
	gui.set_render_order(COMMON.CONSTANTS.GUI_ORDER.MODAL)
	self.animation_action = ACTIONS.Sequence()
	self.animation_action.drop_empty = false

	self.fader_color = gui.get_color(self.vh.fader)
	gui.set_color(self.vh.fader, vmath.vector4(self.fader_color.x, self.fader_color.y, self.fader_color.z, 0))

	self.views.btn_close:set_input_listener(function()
		WORLD.sounds:play_sound(WORLD.sounds.sounds.btn_1)
		self:close()
	end)
	GUI.autosize_text(self.vh.title_lbl, 1.5, COMMON.LOCALIZATION.cats_book_title())

	pprint(COMMON.GLOBAL.BOOK_SCROLL)
	self.views.list.cats_list.scroll_to(COMMON.GLOBAL.BOOK_SCROLL.x, COMMON.GLOBAL.BOOK_SCROLL.y)

end

function Script:close()
	WORLD.sdk:ads_commercial(function()
		WORLD.sm:back()
	end)
end

function Script:animate_hide()
	GUI.window_hide_animation(self)
end

function Script:animate_show()
	GUI.window_show_animation(self)
end

function Script:update(dt)
	BaseGuiScript.update(self, dt)
	self.animation_action:update(dt)
end

function Script:on_input(action_id, action)
	if (action_id == COMMON.HASHES.INPUT.ESCAPE and action.pressed) then
		self:close()
		return true
	end
	if (self.views.btn_close:on_input(action_id, action)) then return true end

	if (self.views.list:on_input(action_id, action)) then return true end
	if (action_id == COMMON.HASHES.INPUT.TOUCH and action.pressed and not gui.pick_node(self.vh.click_zone, action.x, action.y)) then
		self:close()
		return
	end
end

function Script:on_resize()
	gui.set_adjust_mode(self.vh.root_adjust, COMMON.RENDER.gui_scale.mode)
	gui.set_scale(self.vh.root_adjust, COMMON.RENDER.gui_scale.scale2)
end

function Script:on_storage_changed()
	BaseGuiScript.on_storage_changed(self)
	self.views.list:refresh()
end

function Script:final()
	BaseGuiScript.final(self)
	for k, v in ipairs(DEFS.CATS.LIST) do
		if WORLD.storage.cats:is_collected(v.id) then
			WORLD.storage.cats:look_at_book(v.id)
		end
	end
	COMMON.GLOBAL.BOOK_SCROLL.x = self.views.list.cats_list.scroll.x
	COMMON.GLOBAL.BOOK_SCROLL.y = self.views.list.cats_list.scroll.y
end

COMMON.N28S.register_scripts({ Script() })